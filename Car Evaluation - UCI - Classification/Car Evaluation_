{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Car Evaluation ","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPGQC9qguNG7xw1tkPvkdvK"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"eH66myXpHS5a","executionInfo":{"status":"ok","timestamp":1605548441189,"user_tz":-330,"elapsed":3332,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}}},"source":["import numpy as np\n","import pandas as pd \n","import sklearn\n","import matplotlib.pyplot as plt\n","from sklearn.utils import shuffle\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn import linear_model, preprocessing "],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"_rR8hmnoMuXR","executionInfo":{"status":"ok","timestamp":1605548477836,"user_tz":-330,"elapsed":39949,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"7db71847-66c3-4225-972d-ed6f01bfd8f7","colab":{"base_uri":"https://localhost:8080/"}},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"lgIrkiVfN7Mp","executionInfo":{"status":"ok","timestamp":1605548480874,"user_tz":-330,"elapsed":42963,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}}},"source":["data = pd.read_csv('drive/My Drive/Colab Notebooks/UCI/Car Evaluation - UCI - Classification/car.data', header=None, names=['price','maintenance','doors','persons','lugboot','safety','verdict'])"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"yAhPLWSAOb1y","executionInfo":{"status":"ok","timestamp":1605548480905,"user_tz":-330,"elapsed":42973,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"41db045c-517e-4e4b-faad-069f3b11379d","colab":{"base_uri":"https://localhost:8080/","height":198}},"source":["data.head()"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","      <th>maintenance</th>\n","      <th>doors</th>\n","      <th>persons</th>\n","      <th>lugboot</th>\n","      <th>safety</th>\n","      <th>verdict</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>vhigh</td>\n","      <td>vhigh</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>small</td>\n","      <td>low</td>\n","      <td>unacc</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>vhigh</td>\n","      <td>vhigh</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>small</td>\n","      <td>med</td>\n","      <td>unacc</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>vhigh</td>\n","      <td>vhigh</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>small</td>\n","      <td>high</td>\n","      <td>unacc</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>vhigh</td>\n","      <td>vhigh</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>med</td>\n","      <td>low</td>\n","      <td>unacc</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>vhigh</td>\n","      <td>vhigh</td>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>med</td>\n","      <td>med</td>\n","      <td>unacc</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   price maintenance doors persons lugboot safety verdict\n","0  vhigh       vhigh     2       2   small    low   unacc\n","1  vhigh       vhigh     2       2   small    med   unacc\n","2  vhigh       vhigh     2       2   small   high   unacc\n","3  vhigh       vhigh     2       2     med    low   unacc\n","4  vhigh       vhigh     2       2     med    med   unacc"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"markdown","metadata":{"id":"kp0HvYkzanCz"},"source":["We can try predicting Verdict with other features.\n","\n","All except 2 features are objects, converting them into integers is essential before training. Lets take a look at all the unique values."]},{"cell_type":"code","metadata":{"id":"vaOJ4XojZSNz","executionInfo":{"status":"ok","timestamp":1605548480913,"user_tz":-330,"elapsed":42962,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"cfad623e-c481-4e13-c0ac-af91928313fe","colab":{"base_uri":"https://localhost:8080/"}},"source":["for i in data.columns:\n","  print(i, data[i].unique(), data[i].dtypes)"],"execution_count":5,"outputs":[{"output_type":"stream","text":["price ['vhigh' 'high' 'med' 'low'] object\n","maintenance ['vhigh' 'high' 'med' 'low'] object\n","doors ['2' '3' '4' '5more'] object\n","persons ['2' '4' 'more'] object\n","lugboot ['small' 'med' 'big'] object\n","safety ['low' 'med' 'high'] object\n","verdict ['unacc' 'acc' 'vgood' 'good'] object\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"zNx78U3sawYe"},"source":["Turns out every column is an object, an ordinal encoder would be ideal but I won't have control over which value will be substituted by which digit. I will just use replace."]},{"cell_type":"code","metadata":{"id":"L_wkIK9Cl8Mo","executionInfo":{"status":"ok","timestamp":1605548480917,"user_tz":-330,"elapsed":42950,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}}},"source":["data_enc = data\n","data_enc['price'].replace(to_replace=['low','med','high','vhigh'], value=[1, 2, 3, 4], inplace=True)\n","data_enc['maintenance'].replace(to_replace=['low','med','high','vhigh'], value=[1, 2, 3, 4], inplace=True)\n","data_enc['doors'].replace(to_replace=['2','3','4','5more'], value=[1, 2, 3, 4], inplace=True)\n","data_enc['persons'].replace(to_replace=['2','4','more'], value=[1, 2, 3], inplace=True)\n","data_enc['lugboot'].replace(to_replace=['small','med','big'], value=[1, 2, 3], inplace=True)\n","data_enc['safety'].replace(to_replace=['low', 'med', 'high'], value=[1, 2, 3], inplace=True)\n","data_enc['verdict'].replace(to_replace=['unacc','acc','good','vgood'], value=[1, 2, 3, 4], inplace=True)"],"execution_count":6,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Gs4RFZ_A30JP"},"source":["I dont see any point of visualization here but as the data is in numeric format a correlation matrix would work."]},{"cell_type":"code","metadata":{"id":"Evzr7UYF3_b5","executionInfo":{"status":"ok","timestamp":1605548480921,"user_tz":-330,"elapsed":42935,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"88549edd-fa76-407a-8e1e-1bb20c2c1e1c","colab":{"base_uri":"https://localhost:8080/","height":258}},"source":["data_enc.corr()"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>price</th>\n","      <th>maintenance</th>\n","      <th>doors</th>\n","      <th>persons</th>\n","      <th>lugboot</th>\n","      <th>safety</th>\n","      <th>verdict</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>price</th>\n","      <td>1.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-0.282750</td>\n","    </tr>\n","    <tr>\n","      <th>maintenance</th>\n","      <td>0.00000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>-0.232422</td>\n","    </tr>\n","    <tr>\n","      <th>doors</th>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.066057</td>\n","    </tr>\n","    <tr>\n","      <th>persons</th>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.341707</td>\n","    </tr>\n","    <tr>\n","      <th>lugboot</th>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>0.157932</td>\n","    </tr>\n","    <tr>\n","      <th>safety</th>\n","      <td>0.00000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.439337</td>\n","    </tr>\n","    <tr>\n","      <th>verdict</th>\n","      <td>-0.28275</td>\n","      <td>-0.232422</td>\n","      <td>0.066057</td>\n","      <td>0.341707</td>\n","      <td>0.157932</td>\n","      <td>0.439337</td>\n","      <td>1.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["               price  maintenance     doors  ...   lugboot    safety   verdict\n","price        1.00000     0.000000  0.000000  ...  0.000000  0.000000 -0.282750\n","maintenance  0.00000     1.000000  0.000000  ...  0.000000  0.000000 -0.232422\n","doors        0.00000     0.000000  1.000000  ...  0.000000  0.000000  0.066057\n","persons      0.00000     0.000000  0.000000  ...  0.000000  0.000000  0.341707\n","lugboot      0.00000     0.000000  0.000000  ...  1.000000  0.000000  0.157932\n","safety       0.00000     0.000000  0.000000  ...  0.000000  1.000000  0.439337\n","verdict     -0.28275    -0.232422  0.066057  ...  0.157932  0.439337  1.000000\n","\n","[7 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"markdown","metadata":{"id":"kdW3JCvZ264o"},"source":["Correlation is the strongest with safety and number of seats, price and maint also have, but negative, inferring that pricey cars are unacceptable. However the corr is weak.\n","\n","Moving on, splitting the encoded dataframe to train and test sets"]},{"cell_type":"code","metadata":{"id":"gDmD0XnkOd8q","executionInfo":{"status":"ok","timestamp":1605548480926,"user_tz":-330,"elapsed":42922,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}}},"source":["X = data_enc.drop(['verdict'], axis=1)\n","y = data_enc['verdict']\n","\n","x_train, x_test, y_train, y_test = sklearn.model_selection.train_test_split(X, y, test_size = 0.1) "],"execution_count":8,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"jkwNqIu53Lmj"},"source":["Even though Decision tree seems to be a better fit for this data, I will start with KNN"]},{"cell_type":"code","metadata":{"id":"aQusw6RIxm7g","executionInfo":{"status":"ok","timestamp":1605548480928,"user_tz":-330,"elapsed":42907,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"ee3deb51-2d08-4ee6-d459-1448e2b142cf","colab":{"base_uri":"https://localhost:8080/"}},"source":["knn = KNeighborsClassifier()\n","knn.fit(x_train,y_train)\n","pred=knn.predict(x_test)\n","knn.score(x_test,y_test)"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9017341040462428"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"Bd6zWsRg6Cco"},"source":["With default neighbors = 5, the model has a good accuracy. As this is a classification problem, accuracy is not the best attribute to judge the performance, lets also take a look at its F1 scores "]},{"cell_type":"code","metadata":{"id":"D27eZrxy590D","executionInfo":{"status":"ok","timestamp":1605548480930,"user_tz":-330,"elapsed":42891,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"b2a7199e-3043-43a6-c8f5-d1e61ddff9e0","colab":{"base_uri":"https://localhost:8080/"}},"source":["from sklearn.metrics import classification_report\n","print(classification_report(y_test,pred))"],"execution_count":10,"outputs":[{"output_type":"stream","text":["              precision    recall  f1-score   support\n","\n","           1       0.90      0.99      0.94       120\n","           2       0.97      0.68      0.80        41\n","           3       0.57      0.67      0.62         6\n","           4       1.00      0.83      0.91         6\n","\n","    accuracy                           0.90       173\n","   macro avg       0.86      0.79      0.82       173\n","weighted avg       0.91      0.90      0.90       173\n","\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"wmjztU4saDBm"},"source":["Here we have F1 scores for each verdict type. And they look pretty good.\n","\n","\"Support\" is the number of instances of each class occurance, lets verify that with a plot \n","\n","\n"]},{"cell_type":"code","metadata":{"id":"WKG9TqJM6k-j","executionInfo":{"status":"ok","timestamp":1605548480932,"user_tz":-330,"elapsed":42874,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"fd3b0aaf-c454-4ac5-a91e-526102eaedfb","colab":{"base_uri":"https://localhost:8080/"}},"source":["print(y_test.value_counts())\n","\n","a = pred\n","unique, counts = np.unique(a, return_counts=True)\n","print(np.asarray((unique, counts)).T)"],"execution_count":11,"outputs":[{"output_type":"stream","text":["1    120\n","2     41\n","4      6\n","3      6\n","Name: verdict, dtype: int64\n","[[  1 132]\n"," [  2  29]\n"," [  3   7]\n"," [  4   5]]\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"4SMAz_wpfibH"},"source":["Before moving on to Random forest I would like to check how the n_neighbors value is affecting the accuracy"]},{"cell_type":"code","metadata":{"id":"lwVwvgZIgCD9","executionInfo":{"status":"ok","timestamp":1605548483286,"user_tz":-330,"elapsed":45211,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}}},"source":["train_accuracy = []\n","test_accuracy = []\n","\n","for k in range(1,30):\n","\n","    #Setup a knn classifier with k neighbors\n","    knn = KNeighborsClassifier(n_neighbors=k)\n","    \n","    #Fit the model\n","    knn.fit(x_train, y_train)\n","    \n","    #Compute accuracy on the training set, if bad score = underfitting\n","    trac = knn.score(x_train, y_train)\n","    train_accuracy.append(trac)\n","    \n","    #Compute accuracy on the test set\n","    teac = knn.score(x_test, y_test)\n","    test_accuracy.append(teac)  "],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"kFuIOtvKjZ5g","executionInfo":{"status":"ok","timestamp":1605548483290,"user_tz":-330,"elapsed":45196,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"93b281bc-083b-4668-daea-639929de4b60","colab":{"base_uri":"https://localhost:8080/","height":295}},"source":["#Generate plot\n","x_axis = list(range(1, 30))\n","plt.title('k-NN Varying number of neighbors')\n","plt.plot(x_axis, test_accuracy, label='Testing Accuracy')\n","plt.plot(x_axis, train_accuracy, label='Training accuracy')\n","plt.legend()\n","plt.xlabel('Number of neighbors')\n","plt.ylabel('Accuracy')\n","plt.grid()\n","plt.show()"],"execution_count":13,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"-Xdm9VEoljz1"},"source":["The peak is at 7 neighbors\n","\n","Now lets try Random forest classifier\n","\n"]},{"cell_type":"code","metadata":{"id":"WZu4zVXblNTe","executionInfo":{"status":"ok","timestamp":1605548804993,"user_tz":-330,"elapsed":1312,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"512eeecc-12c5-4fdf-b8e9-2bf9cb12f6dd","colab":{"base_uri":"https://localhost:8080/"}},"source":["from sklearn.ensemble import RandomForestClassifier\n","from sklearn.metrics import f1_score\n","rfc = RandomForestClassifier()\n","rfc.fit(x_train,y_train)\n","print(rfc.score(x_test,y_test))\n","print(f1_score(y_test,rfc.predict(x_test),average='macro'))"],"execution_count":19,"outputs":[{"output_type":"stream","text":["0.976878612716763\n","0.9437635027574052\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"LlEGQELTK3zu"},"source":["As expected random forest gives better accuracy and F1 scores.\n","\n","Lets determine training and test scores for varying estimator values."]},{"cell_type":"code","metadata":{"id":"Dse4PrRtKas7","executionInfo":{"status":"ok","timestamp":1605551336533,"user_tz":-330,"elapsed":3472,"user":{"displayName":"farooq shaik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GgHSGmvh60L6r5nRkMxhnv1tkLzvnoH1_5YYSsy=s64","userId":"16300976798413621180"}},"outputId":"92deee49-cfba-4465-cee9-710e2b3feb5a","colab":{"base_uri":"https://localhost:8080/","height":483}},"source":["from sklearn.model_selection import validation_curve\n","\n","param_range=[10,25,50,100]\n","curve = validation_curve(rfc,x_train,y_train,cv=5,param_name='n_estimators',param_range=param_range)\n","\n","train_score = [curve[0][i].mean() for i in range (0,len(param_range))]\n","test_score = [curve[1][i].mean() for i in range (0,len(param_range))]\n","fig=plt.figure(figsize=(6,8))\n","plt.plot(param_range,train_score)\n","plt.plot(param_range,test_score)\n","plt.grid()\n","plt.xticks=param_range"],"execution_count":25,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x576 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"0Rjoi0wOXNrp"},"source":["50 trees is where its at"]},{"cell_type":"code","metadata":{"id":"TAdAOT9gXTQM"},"source":[""],"execution_count":null,"outputs":[]}]}